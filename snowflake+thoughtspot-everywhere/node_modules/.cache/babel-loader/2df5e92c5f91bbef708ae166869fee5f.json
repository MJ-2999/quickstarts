{"ast":null,"code":"/**\n * Copyright (c) 2021\n *\n * Embed a ThoughtSpot pinboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Pinboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot pinboard or visualization\n * @Category Pinboards and Charts\n */\n\nexport class PinboardEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.defaultHeight = 500;\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n\n    this.updateIFrameHeight = data => {\n      this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    this.embedIframeCenter = (data, responder) => {\n      const obj = this.getIframeCenter();\n      responder({\n        type: EmbedEvent.EmbedIframeCenter,\n        data: obj\n      });\n    };\n\n    this.handleRouteChangeFullHeightPinboard = data => {\n      if (data.data.canvasState !== 'EMBED' && data.data.canvasState !== 'pinboard') {\n        this.setIFrameHeight(this.defaultHeight);\n      }\n    };\n  }\n  /**\n   * Construct a map of params to be passed on to the\n   * embedded pinboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      enableVizTransformations,\n      fullHeight,\n      preventPinboardFilterRemoval,\n      defaultHeight\n    } = this.viewConfig;\n\n    if (fullHeight === true) {\n      params[Param.fullHeight] = true;\n    }\n\n    if (defaultHeight) {\n      this.defaultHeight = defaultHeight;\n    }\n\n    if (enableVizTransformations !== undefined) {\n      params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n    }\n\n    if (preventPinboardFilterRemoval) {\n      params[Param.preventPinboardFilterRemoval] = true;\n    }\n\n    params[Param.livedBoardEmbed] = true;\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot pinboard or visualization\n   * to be loaded within the iframe.\n   * @param pinboardId The GUID of the pinboard.\n   * @param vizId The optional GUID of a visualization within the pinboard.\n   * @param runtimeFilters A list of runtime filters to be applied to\n   * the pinboard or visualization on load.\n   */\n\n\n  getIFrameSrc(pinboardId, vizId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, true, false, false)}/viz/${pinboardId}`;\n\n    if (vizId) {\n      url = `${url}/${vizId}`;\n    }\n\n    return url;\n  }\n  /**\n   * Render an embedded ThoughtSpot pinboard or visualization\n   * @param renderOptions An object specifying the pinboard ID,\n   * visualization ID and the runtime filters.\n   */\n\n\n  render() {\n    const {\n      pinboardId,\n      vizId,\n      runtimeFilters\n    } = this.viewConfig;\n\n    if (!pinboardId && !vizId) {\n      this.handleError(ERROR_MESSAGE.PINBOARD_VIZ_ID_VALIDATION);\n    }\n\n    if (this.viewConfig.fullHeight === true) {\n      this.on(EmbedEvent.RouteChange, this.handleRouteChangeFullHeightPinboard);\n      this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n      this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n    }\n\n    super.render();\n    const src = this.getIFrameSrc(pinboardId, vizId, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../src/embed/pinboard.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2021\n *\n * Embed a ThoughtSpot pinboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Pinboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param, } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot pinboard or visualization\n * @Category Pinboards and Charts\n */\nexport class PinboardEmbed extends V1Embed {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector, viewConfig) {\n        super(domSelector, viewConfig);\n        this.defaultHeight = 500;\n        /**\n         * Set the iframe height as per the computed height received\n         * from the ThoughtSpot app.\n         * @param data The event payload\n         */\n        this.updateIFrameHeight = (data) => {\n            this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n        };\n        this.embedIframeCenter = (data, responder) => {\n            const obj = this.getIframeCenter();\n            responder({ type: EmbedEvent.EmbedIframeCenter, data: obj });\n        };\n        this.handleRouteChangeFullHeightPinboard = (data) => {\n            if (data.data.canvasState !== 'EMBED' &&\n                data.data.canvasState !== 'pinboard') {\n                this.setIFrameHeight(this.defaultHeight);\n            }\n        };\n    }\n    /**\n     * Construct a map of params to be passed on to the\n     * embedded pinboard or visualization.\n     */\n    getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const { enableVizTransformations, fullHeight, preventPinboardFilterRemoval, defaultHeight, } = this.viewConfig;\n        if (fullHeight === true) {\n            params[Param.fullHeight] = true;\n        }\n        if (defaultHeight) {\n            this.defaultHeight = defaultHeight;\n        }\n        if (enableVizTransformations !== undefined) {\n            params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n        }\n        if (preventPinboardFilterRemoval) {\n            params[Param.preventPinboardFilterRemoval] = true;\n        }\n        params[Param.livedBoardEmbed] = true;\n        const queryParams = getQueryParamString(params, true);\n        return queryParams;\n    }\n    /**\n     * Construct the URL of the embedded ThoughtSpot pinboard or visualization\n     * to be loaded within the iframe.\n     * @param pinboardId The GUID of the pinboard.\n     * @param vizId The optional GUID of a visualization within the pinboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the pinboard or visualization on load.\n     */\n    getIFrameSrc(pinboardId, vizId, runtimeFilters) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(queryString, true, false, false)}/viz/${pinboardId}`;\n        if (vizId) {\n            url = `${url}/${vizId}`;\n        }\n        return url;\n    }\n    /**\n     * Render an embedded ThoughtSpot pinboard or visualization\n     * @param renderOptions An object specifying the pinboard ID,\n     * visualization ID and the runtime filters.\n     */\n    render() {\n        const { pinboardId, vizId, runtimeFilters } = this.viewConfig;\n        if (!pinboardId && !vizId) {\n            this.handleError(ERROR_MESSAGE.PINBOARD_VIZ_ID_VALIDATION);\n        }\n        if (this.viewConfig.fullHeight === true) {\n            this.on(EmbedEvent.RouteChange, this.handleRouteChangeFullHeightPinboard);\n            this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n            this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n        }\n        super.render();\n        const src = this.getIFrameSrc(pinboardId, vizId, runtimeFilters);\n        this.renderV1Embed(src);\n        return this;\n    }\n}\n//# sourceMappingURL=pinboard.js.map"]},"metadata":{},"sourceType":"module"}