{"ast":null,"code":"/**\n * Copyright (c) 2021\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\n\nexport var Page;\n\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Pinboards listing page\n   */\n\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n\n  Page[\"Data\"] = \"data\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\n\n\nexport class AppEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded pinboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      tag,\n      hideObjects\n    } = this.viewConfig;\n\n    if (tag) {\n      params[Param.Tag] = tag;\n    }\n\n    if (hideObjects && hideObjects.length) {\n      params[Param.HideObjects] = JSON.stringify(hideObjects);\n    }\n\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Constructs the URL of the ThoughtSpot app page to be rendered.\n   * @param pageId The ID of the page to be embedded.\n   */\n\n\n  getIFrameSrc(pageId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    const url = `${this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true)}/${pageId}`;\n    return url;\n  }\n  /**\n   * Gets the ThoughtSpot route of the page for a particular page ID.\n   * @param pageId The identifier for a page in the ThoughtSpot app.\n   */\n\n\n  getPageRoute(pageId) {\n    switch (pageId) {\n      case Page.Search:\n        return 'answer';\n\n      case Page.Answers:\n        return 'answers';\n\n      case Page.Pinboards:\n        return 'pinboards';\n\n      case Page.Data:\n        return 'data/tables';\n\n      case Page.Home:\n      default:\n        return 'home';\n    }\n  }\n  /**\n   * Formats the path provided by the user.\n   * @param path The URL path.\n   * @returns The URL path that the embedded app understands.\n   */\n\n\n  formatPath(path) {\n    if (!path) {\n      return null;\n    } // remove leading slash\n\n\n    if (path.indexOf('/') === 0) {\n      return path.substring(1);\n    }\n\n    return path;\n  }\n  /**\n   * Renders the embedded application pages in the ThoughtSpot app.\n   * @param renderOptions An object containing the page ID\n   * to be embedded.\n   */\n\n\n  render() {\n    super.render();\n    const {\n      pageId,\n      runtimeFilters,\n      path\n    } = this.viewConfig;\n    const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n    const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../src/embed/app.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2021\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport var Page;\n(function (Page) {\n    /**\n     * Home page\n     */\n    Page[\"Home\"] = \"home\";\n    /**\n     * Search page\n     */\n    Page[\"Search\"] = \"search\";\n    /**\n     * Saved answers listing page\n     */\n    Page[\"Answers\"] = \"answers\";\n    /**\n     * Pinboards listing page\n     */\n    Page[\"Pinboards\"] = \"pinboards\";\n    /**\n     * Data management page\n     */\n    Page[\"Data\"] = \"data\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport class AppEmbed extends V1Embed {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector, viewConfig) {\n        super(domSelector, viewConfig);\n    }\n    /**\n     * Constructs a map of parameters to be passed on to the\n     * embedded pinboard or visualization.\n     */\n    getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const { tag, hideObjects } = this.viewConfig;\n        if (tag) {\n            params[Param.Tag] = tag;\n        }\n        if (hideObjects && hideObjects.length) {\n            params[Param.HideObjects] = JSON.stringify(hideObjects);\n        }\n        const queryParams = getQueryParamString(params, true);\n        return queryParams;\n    }\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n    getIFrameSrc(pageId, runtimeFilters) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        const url = `${this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true)}/${pageId}`;\n        return url;\n    }\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n    getPageRoute(pageId) {\n        switch (pageId) {\n            case Page.Search:\n                return 'answer';\n            case Page.Answers:\n                return 'answers';\n            case Page.Pinboards:\n                return 'pinboards';\n            case Page.Data:\n                return 'data/tables';\n            case Page.Home:\n            default:\n                return 'home';\n        }\n    }\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n    formatPath(path) {\n        if (!path) {\n            return null;\n        }\n        // remove leading slash\n        if (path.indexOf('/') === 0) {\n            return path.substring(1);\n        }\n        return path;\n    }\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n    render() {\n        super.render();\n        const { pageId, runtimeFilters, path } = this.viewConfig;\n        const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n        const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n        this.renderV1Embed(src);\n        return this;\n    }\n}\n//# sourceMappingURL=app.js.map"]},"metadata":{},"sourceType":"module"}