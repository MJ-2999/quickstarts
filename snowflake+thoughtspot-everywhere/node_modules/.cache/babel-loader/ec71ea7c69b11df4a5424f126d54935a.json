{"ast":null,"code":"/**\n * Copyright (c) 2021\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getEncodedQueryParamsString, getCssDimension, getOffsetTop } from '../utils';\nimport { getThoughtSpotHost, URL_MAX_LENGTH, DEFAULT_EMBED_WIDTH, DEFAULT_EMBED_HEIGHT, getV2BasePath } from '../config';\nimport { EmbedEvent, Param } from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { getProcessData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport { version } from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\n\nconst V1EventMap = {\n  [EmbedEvent.Data]: [EmbedEvent.V1Data]\n};\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\n\nexport class TsEmbed {\n  constructor(domSelector, viewConfig) {\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    this.shouldEncodeUrlQueryParams = false;\n    this.el = this.getDOMNode(domSelector); // TODO: handle error\n\n    this.embedConfig = getEmbedConfig();\n    this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n    this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n    this.eventHandlerMap = new Map();\n    this.isError = false;\n    this.viewConfig = viewConfig;\n    this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n\n    if (!this.embedConfig.suppressNoCookieAccessAlert) {\n      this.on(EmbedEvent.NoCookieAccess, () => {\n        // eslint-disable-next-line no-alert\n        alert('Third party cookie access is blocked on this browser, please allow third party cookies for ThoughtSpot to work properly');\n      });\n    }\n  }\n  /**\n   * Gets a reference to the root DOM node where\n   * the embedded content will appear.\n   * @param domSelector\n   */\n\n\n  getDOMNode(domSelector) {\n    return typeof domSelector === 'string' ? document.querySelector(domSelector) : domSelector;\n  }\n  /**\n   * Throws error encountered during initialization.\n   */\n\n\n  throwInitError() {\n    this.handleError('You need to init the ThoughtSpot SDK module first');\n  }\n  /**\n   * Handles errors within the SDK\n   * @param error The error message or object\n   */\n\n\n  handleError(error) {\n    this.isError = true;\n    this.executeCallbacks(EmbedEvent.Error, {\n      error\n    }); // Log error\n\n    console.log(error);\n  }\n  /**\n   * Extracts the type field from the event payload\n   * @param event The window message event\n   */\n\n\n  getEventType(event) {\n    var _a, _b; // eslint-disable-next-line no-underscore-dangle\n\n\n    return ((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) || ((_b = event.data) === null || _b === void 0 ? void 0 : _b.__type);\n  }\n  /**\n   * Extracts the port field from the event payload\n   * @param event  The window message event\n   * @returns\n   */\n\n\n  getEventPort(event) {\n    if (event.ports.length && event.ports[0]) {\n      return event.ports[0];\n    }\n\n    return null;\n  }\n  /**\n   * fix for ts7.sep.cl\n   * will be removed for ts7.oct.cl\n   * @hidden\n   */\n\n\n  formatEventData(event) {\n    const eventData = { ...event.data\n    };\n\n    if (!eventData.data) {\n      eventData.data = event.data.payload;\n    }\n\n    return eventData;\n  }\n  /**\n   * Adds a global event listener to window for \"message\" events.\n   * ThoughtSpot detects if a particular event is targeted to this\n   * embed instance through an identifier contained in the payload,\n   * and executes the registered callbacks accordingly.\n   */\n\n\n  subscribeToEvents() {\n    window.addEventListener('message', event => {\n      const eventType = this.getEventType(event);\n      const eventPort = this.getEventPort(event);\n      const eventData = this.formatEventData(event);\n\n      if (event.source === this.iFrame.contentWindow) {\n        this.executeCallbacks(eventType, getProcessData(eventType, eventData, this.thoughtSpotHost), eventPort);\n      }\n    });\n  }\n  /**\n   * Constructs the base URL string to load the ThoughtSpot app.\n   */\n\n\n  getEmbedBasePath(query) {\n    let queryString = query;\n\n    if (this.shouldEncodeUrlQueryParams) {\n      queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryString.substr(1))}`;\n    }\n\n    const basePath = [this.thoughtSpotHost, this.thoughtSpotV2Base, queryString].filter(x => x.length > 0).join('/');\n    return `${basePath}#/embed`;\n  }\n  /**\n   * Common query params set for all the embed modes.\n   * @returns queryParams\n   */\n\n\n  getBaseQueryParams() {\n    var _a;\n\n    const queryParams = {};\n    let hostAppUrl = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host) || ''; // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n    // in any url param.\n\n    if (hostAppUrl.includes('localhost') || hostAppUrl.includes('127.0.0.1')) {\n      hostAppUrl = 'local-host';\n    }\n\n    queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n    queryParams[Param.ViewPortHeight] = window.innerHeight;\n    queryParams[Param.ViewPortWidth] = window.innerWidth;\n    queryParams[Param.Version] = version;\n\n    if (this.embedConfig.customCssUrl) {\n      queryParams[Param.CustomCSSUrl] = this.embedConfig.customCssUrl;\n    }\n\n    const {\n      disabledActions,\n      disabledActionReason,\n      hiddenActions,\n      visibleActions\n    } = this.viewConfig;\n\n    if ((visibleActions === null || visibleActions === void 0 ? void 0 : visibleActions.length) && (hiddenActions === null || hiddenActions === void 0 ? void 0 : hiddenActions.length)) {\n      this.handleError('You cannot have both hidden actions and visible actions');\n      return queryParams;\n    }\n\n    if (disabledActions === null || disabledActions === void 0 ? void 0 : disabledActions.length) {\n      queryParams[Param.DisableActions] = disabledActions;\n    }\n\n    if (disabledActionReason) {\n      queryParams[Param.DisableActionReason] = disabledActionReason;\n    }\n\n    if (hiddenActions === null || hiddenActions === void 0 ? void 0 : hiddenActions.length) {\n      queryParams[Param.HideActions] = hiddenActions;\n    }\n\n    if (Array.isArray(visibleActions)) {\n      queryParams[Param.VisibleActions] = visibleActions;\n    }\n\n    return queryParams;\n  }\n  /**\n   * Constructs the base URL string to load v1 of the ThoughtSpot app.\n   * This is used for embedding pinboards, visualizations, and full application.\n   * @param queryString The query string to append to the URL.\n   * @param isAppEmbed A Boolean parameter to specify if you are embedding\n   * the full application.\n   */\n\n\n  getV1EmbedBasePath(queryString) {\n    let showPrimaryNavbar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let disableProfileAndHelp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let isAppEmbed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const queryStringFrag = queryString ? `&${queryString}` : '';\n    const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n    const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n    let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${isAppEmbed ? disableProfileAndHelpParam : ''}${queryStringFrag}`;\n\n    if (this.shouldEncodeUrlQueryParams) {\n      queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryParams.substr(1))}`;\n    }\n\n    let path = `${this.thoughtSpotHost}/${queryParams}#`;\n\n    if (!isAppEmbed) {\n      path = `${path}/embed`;\n    }\n\n    return path;\n  }\n  /**\n   * Renders the embedded ThoughtSpot app in an iframe and sets up\n   * event listeners.\n   * @param url\n   * @param frameOptions\n   */\n\n\n  renderIFrame(url, frameOptions) {\n    if (this.isError) {\n      return;\n    }\n\n    if (!this.thoughtSpotHost) {\n      this.throwInitError();\n    }\n\n    if (url.length > URL_MAX_LENGTH) {// warn: The URL is too long\n    }\n\n    renderInQueue(nextInQueue => {\n      var _a;\n\n      const initTimestamp = Date.now();\n      this.executeCallbacks(EmbedEvent.Init, {\n        data: {\n          timestamp: initTimestamp\n        }\n      });\n      uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n      (_a = getAuthPromise()) === null || _a === void 0 ? void 0 : _a.then(() => {\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE);\n        this.iFrame = this.iFrame || document.createElement('iframe');\n        this.iFrame.src = url; // according to screenfull.js documentation\n        // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n\n        this.iFrame.allowFullscreen = true; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n\n        this.iFrame.webkitallowfullscreen = true; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n\n        this.iFrame.mozallowfullscreen = true;\n        const width = getCssDimension((frameOptions === null || frameOptions === void 0 ? void 0 : frameOptions.width) || DEFAULT_EMBED_WIDTH);\n        const height = getCssDimension((frameOptions === null || frameOptions === void 0 ? void 0 : frameOptions.height) || DEFAULT_EMBED_HEIGHT);\n        this.iFrame.style.width = `${width}`;\n        this.iFrame.style.height = `${height}`;\n        this.iFrame.style.border = '0';\n        this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n        this.iFrame.addEventListener('load', () => {\n          nextInQueue();\n          const loadTimestamp = Date.now();\n          this.executeCallbacks(EmbedEvent.Load, {\n            data: {\n              timestamp: loadTimestamp\n            }\n          });\n          uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE, {\n            timeTookToLoad: loadTimestamp - initTimestamp\n          });\n        });\n        this.iFrame.addEventListener('error', () => {\n          nextInQueue();\n        });\n        this.el.innerHTML = '';\n        this.el.appendChild(this.iFrame);\n        const prefetchIframe = document.querySelectorAll('.prefetchIframe');\n\n        if (prefetchIframe.length) {\n          prefetchIframe.forEach(el => {\n            el.remove();\n          });\n        }\n\n        this.subscribeToEvents();\n      }).catch(error => {\n        nextInQueue();\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED);\n        this.handleError(error);\n      });\n    });\n  }\n  /**\n   * Sets the height of the iframe\n   * @param height The height in pixels\n   */\n\n\n  setIFrameHeight(height) {\n    this.iFrame.style.height = `${height}px`;\n  }\n  /**\n   * Executes all registered event handlers for a particular event type\n   * @param eventType The event type\n   * @param data The payload invoked with the event handler\n   * @param eventPort The event Port for a specific MessageChannel\n   */\n\n\n  executeCallbacks(eventType, data, eventPort) {\n    const callbacks = this.eventHandlerMap.get(eventType) || [];\n    callbacks.forEach(callback => callback(data, payload => {\n      this.triggerEventOnPort(eventPort, payload);\n    }));\n  }\n  /**\n   * Returns the ThoughtSpot hostname or IP address.\n   */\n\n\n  getThoughtSpotHost() {\n    return this.thoughtSpotHost;\n  }\n  /**\n   * Gets the v1 event type (if applicable) for the EmbedEvent type\n   * @param eventType The v2 event type\n   * @returns The corresponding v1 event type if one exists\n   * or else the v2 event type itself\n   */\n\n\n  getCompatibleEventType(eventType) {\n    return V1EventMap[eventType] || eventType;\n  }\n  /**\n   * Calculates the iframe center for the current visible viewPort\n   * of iframe using Scroll position of Host App, offsetTop for iframe\n   * in Host app. ViewPort height of the tab.\n   * @returns iframe Center in visible viewport,\n   *  Iframe height,\n   *  View port height.\n   */\n\n\n  getIframeCenter() {\n    const offsetTopClient = getOffsetTop(this.iFrame);\n    const scrollTopClient = window.scrollY;\n    const viewPortHeight = window.innerHeight;\n    const iframeHeight = this.iFrame.offsetHeight;\n    const iframeScrolled = scrollTopClient - offsetTopClient;\n    let iframeVisibleViewPort;\n    let iframeOffset;\n\n    if (iframeScrolled < 0) {\n      iframeVisibleViewPort = viewPortHeight - (offsetTopClient - scrollTopClient);\n      iframeVisibleViewPort = Math.min(iframeHeight, iframeVisibleViewPort);\n      iframeOffset = 0;\n    } else {\n      iframeVisibleViewPort = Math.min(iframeHeight - iframeScrolled, viewPortHeight);\n      iframeOffset = iframeScrolled;\n    }\n\n    const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n    return {\n      iframeCenter,\n      iframeScrolled,\n      iframeHeight,\n      viewPortHeight,\n      iframeVisibleViewPort\n    };\n  }\n  /**\n   * Registers an event listener to trigger an alert when the ThoughtSpot app\n   * sends an event of a particular message type to the host application.\n   *\n   * @param messageType The message type\n   * @param callback A callback function\n   */\n\n\n  on(messageType, callback) {\n    if (this.isRendered) {\n      this.handleError('Please register event handlers before calling render');\n    }\n\n    const callbacks = this.eventHandlerMap.get(messageType) || [];\n    callbacks.push(callback);\n    this.eventHandlerMap.set(messageType, callbacks);\n    return this;\n  }\n  /**\n   * Navigates users to the specified application page.\n   * Use this method to navigate users from the embedded\n   * ThoughtSpot context to a specific page in your app.\n   * @param path The page path string.\n   * For example, to navigate users to a pinboard page,\n   * define the method as navigateToPage('pinboard/&lt;pinboardId&gt;').\n   */\n\n\n  navigateToPage(path) {\n    var _a;\n\n    const iframeSrc = (_a = this.iFrame) === null || _a === void 0 ? void 0 : _a.src;\n\n    if (iframeSrc) {\n      const embedPath = '#/embed';\n      const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n      this.iFrame.src = `${iframeSrc.split(currentPath)[0]}${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n    } else {\n      console.log('Please call render before invoking this method');\n    }\n  }\n  /**\n   * Triggers an event on specific Port registered against\n   * for the EmbedEvent\n   * @param eventType The message type\n   * @param data The payload to send\n   */\n\n\n  triggerEventOnPort(eventPort, payload) {\n    if (eventPort) {\n      try {\n        eventPort.postMessage({\n          type: payload.type,\n          data: payload.data\n        });\n      } catch (e) {\n        eventPort.postMessage({\n          error: e\n        });\n        console.log(e);\n      }\n    } else {\n      console.log('Event Port is not defined');\n    }\n  }\n  /**\n   * Triggers an event to the embedded app\n   * @param messageType The event type\n   * @param data The payload to send with the message\n   */\n\n\n  trigger(messageType, data) {\n    processTrigger(this.iFrame, messageType, this.thoughtSpotHost, data);\n    uploadMixpanelEvent(`${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`);\n    return this;\n  }\n  /**\n   * Marks the ThoughtSpot object to have been rendered\n   * Needs to be overridden by subclasses to do the actual\n   * rendering of the iframe.\n   * @param args\n   */\n\n\n  render() {\n    this.isRendered = true;\n    return this;\n  }\n\n}\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\n\nexport class V1Embed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Render the app in an iframe and set up event handlers\n   * @param iframeSrc\n   */\n\n\n  renderV1Embed(iframeSrc) {\n    this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n  } // @override\n\n\n  on(messageType, callback) {\n    const eventType = this.getCompatibleEventType(messageType);\n    return super.on(eventType, callback);\n  }\n\n}","map":{"version":3,"sources":["../../../src/embed/ts-embed.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2021\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getEncodedQueryParamsString, getCssDimension, getOffsetTop, } from '../utils';\nimport { getThoughtSpotHost, URL_MAX_LENGTH, DEFAULT_EMBED_WIDTH, DEFAULT_EMBED_HEIGHT, getV2BasePath, } from '../config';\nimport { EmbedEvent, Param, } from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { getProcessData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport { version } from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\nconst V1EventMap = {\n    [EmbedEvent.Data]: [EmbedEvent.V1Data],\n};\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\nexport class TsEmbed {\n    constructor(domSelector, viewConfig) {\n        /**\n         * Should we encode URL Query Params using base64 encoding which thoughtspot\n         * will generate for embedding. This provides additional security to\n         * thoughtspot clusters against Cross site scripting attacks.\n         * @default false\n         */\n        this.shouldEncodeUrlQueryParams = false;\n        this.el = this.getDOMNode(domSelector);\n        // TODO: handle error\n        this.embedConfig = getEmbedConfig();\n        this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n        this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n        this.eventHandlerMap = new Map();\n        this.isError = false;\n        this.viewConfig = viewConfig;\n        this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n        if (!this.embedConfig.suppressNoCookieAccessAlert) {\n            this.on(EmbedEvent.NoCookieAccess, () => {\n                // eslint-disable-next-line no-alert\n                alert('Third party cookie access is blocked on this browser, please allow third party cookies for ThoughtSpot to work properly');\n            });\n        }\n    }\n    /**\n     * Gets a reference to the root DOM node where\n     * the embedded content will appear.\n     * @param domSelector\n     */\n    getDOMNode(domSelector) {\n        return typeof domSelector === 'string'\n            ? document.querySelector(domSelector)\n            : domSelector;\n    }\n    /**\n     * Throws error encountered during initialization.\n     */\n    throwInitError() {\n        this.handleError('You need to init the ThoughtSpot SDK module first');\n    }\n    /**\n     * Handles errors within the SDK\n     * @param error The error message or object\n     */\n    handleError(error) {\n        this.isError = true;\n        this.executeCallbacks(EmbedEvent.Error, {\n            error,\n        });\n        // Log error\n        console.log(error);\n    }\n    /**\n     * Extracts the type field from the event payload\n     * @param event The window message event\n     */\n    getEventType(event) {\n        var _a, _b;\n        // eslint-disable-next-line no-underscore-dangle\n        return ((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) || ((_b = event.data) === null || _b === void 0 ? void 0 : _b.__type);\n    }\n    /**\n     * Extracts the port field from the event payload\n     * @param event  The window message event\n     * @returns\n     */\n    getEventPort(event) {\n        if (event.ports.length && event.ports[0]) {\n            return event.ports[0];\n        }\n        return null;\n    }\n    /**\n     * fix for ts7.sep.cl\n     * will be removed for ts7.oct.cl\n     * @hidden\n     */\n    formatEventData(event) {\n        const eventData = {\n            ...event.data,\n        };\n        if (!eventData.data) {\n            eventData.data = event.data.payload;\n        }\n        return eventData;\n    }\n    /**\n     * Adds a global event listener to window for \"message\" events.\n     * ThoughtSpot detects if a particular event is targeted to this\n     * embed instance through an identifier contained in the payload,\n     * and executes the registered callbacks accordingly.\n     */\n    subscribeToEvents() {\n        window.addEventListener('message', (event) => {\n            const eventType = this.getEventType(event);\n            const eventPort = this.getEventPort(event);\n            const eventData = this.formatEventData(event);\n            if (event.source === this.iFrame.contentWindow) {\n                this.executeCallbacks(eventType, getProcessData(eventType, eventData, this.thoughtSpotHost), eventPort);\n            }\n        });\n    }\n    /**\n     * Constructs the base URL string to load the ThoughtSpot app.\n     */\n    getEmbedBasePath(query) {\n        let queryString = query;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryString.substr(1))}`;\n        }\n        const basePath = [\n            this.thoughtSpotHost,\n            this.thoughtSpotV2Base,\n            queryString,\n        ]\n            .filter((x) => x.length > 0)\n            .join('/');\n        return `${basePath}#/embed`;\n    }\n    /**\n     * Common query params set for all the embed modes.\n     * @returns queryParams\n     */\n    getBaseQueryParams() {\n        var _a;\n        const queryParams = {};\n        let hostAppUrl = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host) || '';\n        // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n        // in any url param.\n        if (hostAppUrl.includes('localhost') ||\n            hostAppUrl.includes('127.0.0.1')) {\n            hostAppUrl = 'local-host';\n        }\n        queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n        queryParams[Param.ViewPortHeight] = window.innerHeight;\n        queryParams[Param.ViewPortWidth] = window.innerWidth;\n        queryParams[Param.Version] = version;\n        if (this.embedConfig.customCssUrl) {\n            queryParams[Param.CustomCSSUrl] = this.embedConfig.customCssUrl;\n        }\n        const { disabledActions, disabledActionReason, hiddenActions, visibleActions, } = this.viewConfig;\n        if ((visibleActions === null || visibleActions === void 0 ? void 0 : visibleActions.length) && (hiddenActions === null || hiddenActions === void 0 ? void 0 : hiddenActions.length)) {\n            this.handleError('You cannot have both hidden actions and visible actions');\n            return queryParams;\n        }\n        if (disabledActions === null || disabledActions === void 0 ? void 0 : disabledActions.length) {\n            queryParams[Param.DisableActions] = disabledActions;\n        }\n        if (disabledActionReason) {\n            queryParams[Param.DisableActionReason] = disabledActionReason;\n        }\n        if (hiddenActions === null || hiddenActions === void 0 ? void 0 : hiddenActions.length) {\n            queryParams[Param.HideActions] = hiddenActions;\n        }\n        if (Array.isArray(visibleActions)) {\n            queryParams[Param.VisibleActions] = visibleActions;\n        }\n        return queryParams;\n    }\n    /**\n     * Constructs the base URL string to load v1 of the ThoughtSpot app.\n     * This is used for embedding pinboards, visualizations, and full application.\n     * @param queryString The query string to append to the URL.\n     * @param isAppEmbed A Boolean parameter to specify if you are embedding\n     * the full application.\n     */\n    getV1EmbedBasePath(queryString, showPrimaryNavbar = false, disableProfileAndHelp = false, isAppEmbed = false) {\n        const queryStringFrag = queryString ? `&${queryString}` : '';\n        const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n        const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n        let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${isAppEmbed ? disableProfileAndHelpParam : ''}${queryStringFrag}`;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryParams.substr(1))}`;\n        }\n        let path = `${this.thoughtSpotHost}/${queryParams}#`;\n        if (!isAppEmbed) {\n            path = `${path}/embed`;\n        }\n        return path;\n    }\n    /**\n     * Renders the embedded ThoughtSpot app in an iframe and sets up\n     * event listeners.\n     * @param url\n     * @param frameOptions\n     */\n    renderIFrame(url, frameOptions) {\n        if (this.isError) {\n            return;\n        }\n        if (!this.thoughtSpotHost) {\n            this.throwInitError();\n        }\n        if (url.length > URL_MAX_LENGTH) {\n            // warn: The URL is too long\n        }\n        renderInQueue((nextInQueue) => {\n            var _a;\n            const initTimestamp = Date.now();\n            this.executeCallbacks(EmbedEvent.Init, {\n                data: {\n                    timestamp: initTimestamp,\n                },\n            });\n            uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n            (_a = getAuthPromise()) === null || _a === void 0 ? void 0 : _a.then(() => {\n                uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE);\n                this.iFrame =\n                    this.iFrame || document.createElement('iframe');\n                this.iFrame.src = url;\n                // according to screenfull.js documentation\n                // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n                this.iFrame.allowFullscreen = true;\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                this.iFrame.webkitallowfullscreen = true;\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                this.iFrame.mozallowfullscreen = true;\n                const width = getCssDimension((frameOptions === null || frameOptions === void 0 ? void 0 : frameOptions.width) || DEFAULT_EMBED_WIDTH);\n                const height = getCssDimension((frameOptions === null || frameOptions === void 0 ? void 0 : frameOptions.height) || DEFAULT_EMBED_HEIGHT);\n                this.iFrame.style.width = `${width}`;\n                this.iFrame.style.height = `${height}`;\n                this.iFrame.style.border = '0';\n                this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n                this.iFrame.addEventListener('load', () => {\n                    nextInQueue();\n                    const loadTimestamp = Date.now();\n                    this.executeCallbacks(EmbedEvent.Load, {\n                        data: {\n                            timestamp: loadTimestamp,\n                        },\n                    });\n                    uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE, {\n                        timeTookToLoad: loadTimestamp - initTimestamp,\n                    });\n                });\n                this.iFrame.addEventListener('error', () => {\n                    nextInQueue();\n                });\n                this.el.innerHTML = '';\n                this.el.appendChild(this.iFrame);\n                const prefetchIframe = document.querySelectorAll('.prefetchIframe');\n                if (prefetchIframe.length) {\n                    prefetchIframe.forEach((el) => {\n                        el.remove();\n                    });\n                }\n                this.subscribeToEvents();\n            }).catch((error) => {\n                nextInQueue();\n                uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED);\n                this.handleError(error);\n            });\n        });\n    }\n    /**\n     * Sets the height of the iframe\n     * @param height The height in pixels\n     */\n    setIFrameHeight(height) {\n        this.iFrame.style.height = `${height}px`;\n    }\n    /**\n     * Executes all registered event handlers for a particular event type\n     * @param eventType The event type\n     * @param data The payload invoked with the event handler\n     * @param eventPort The event Port for a specific MessageChannel\n     */\n    executeCallbacks(eventType, data, eventPort) {\n        const callbacks = this.eventHandlerMap.get(eventType) || [];\n        callbacks.forEach((callback) => callback(data, (payload) => {\n            this.triggerEventOnPort(eventPort, payload);\n        }));\n    }\n    /**\n     * Returns the ThoughtSpot hostname or IP address.\n     */\n    getThoughtSpotHost() {\n        return this.thoughtSpotHost;\n    }\n    /**\n     * Gets the v1 event type (if applicable) for the EmbedEvent type\n     * @param eventType The v2 event type\n     * @returns The corresponding v1 event type if one exists\n     * or else the v2 event type itself\n     */\n    getCompatibleEventType(eventType) {\n        return V1EventMap[eventType] || eventType;\n    }\n    /**\n     * Calculates the iframe center for the current visible viewPort\n     * of iframe using Scroll position of Host App, offsetTop for iframe\n     * in Host app. ViewPort height of the tab.\n     * @returns iframe Center in visible viewport,\n     *  Iframe height,\n     *  View port height.\n     */\n    getIframeCenter() {\n        const offsetTopClient = getOffsetTop(this.iFrame);\n        const scrollTopClient = window.scrollY;\n        const viewPortHeight = window.innerHeight;\n        const iframeHeight = this.iFrame.offsetHeight;\n        const iframeScrolled = scrollTopClient - offsetTopClient;\n        let iframeVisibleViewPort;\n        let iframeOffset;\n        if (iframeScrolled < 0) {\n            iframeVisibleViewPort =\n                viewPortHeight - (offsetTopClient - scrollTopClient);\n            iframeVisibleViewPort = Math.min(iframeHeight, iframeVisibleViewPort);\n            iframeOffset = 0;\n        }\n        else {\n            iframeVisibleViewPort = Math.min(iframeHeight - iframeScrolled, viewPortHeight);\n            iframeOffset = iframeScrolled;\n        }\n        const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n        return {\n            iframeCenter,\n            iframeScrolled,\n            iframeHeight,\n            viewPortHeight,\n            iframeVisibleViewPort,\n        };\n    }\n    /**\n     * Registers an event listener to trigger an alert when the ThoughtSpot app\n     * sends an event of a particular message type to the host application.\n     *\n     * @param messageType The message type\n     * @param callback A callback function\n     */\n    on(messageType, callback) {\n        if (this.isRendered) {\n            this.handleError('Please register event handlers before calling render');\n        }\n        const callbacks = this.eventHandlerMap.get(messageType) || [];\n        callbacks.push(callback);\n        this.eventHandlerMap.set(messageType, callbacks);\n        return this;\n    }\n    /**\n     * Navigates users to the specified application page.\n     * Use this method to navigate users from the embedded\n     * ThoughtSpot context to a specific page in your app.\n     * @param path The page path string.\n     * For example, to navigate users to a pinboard page,\n     * define the method as navigateToPage('pinboard/&lt;pinboardId&gt;').\n     */\n    navigateToPage(path) {\n        var _a;\n        const iframeSrc = (_a = this.iFrame) === null || _a === void 0 ? void 0 : _a.src;\n        if (iframeSrc) {\n            const embedPath = '#/embed';\n            const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n            this.iFrame.src = `${iframeSrc.split(currentPath)[0]}${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n        }\n        else {\n            console.log('Please call render before invoking this method');\n        }\n    }\n    /**\n     * Triggers an event on specific Port registered against\n     * for the EmbedEvent\n     * @param eventType The message type\n     * @param data The payload to send\n     */\n    triggerEventOnPort(eventPort, payload) {\n        if (eventPort) {\n            try {\n                eventPort.postMessage({\n                    type: payload.type,\n                    data: payload.data,\n                });\n            }\n            catch (e) {\n                eventPort.postMessage({ error: e });\n                console.log(e);\n            }\n        }\n        else {\n            console.log('Event Port is not defined');\n        }\n    }\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n    trigger(messageType, data) {\n        processTrigger(this.iFrame, messageType, this.thoughtSpotHost, data);\n        uploadMixpanelEvent(`${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`);\n        return this;\n    }\n    /**\n     * Marks the ThoughtSpot object to have been rendered\n     * Needs to be overridden by subclasses to do the actual\n     * rendering of the iframe.\n     * @param args\n     */\n    render() {\n        this.isRendered = true;\n        return this;\n    }\n}\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\nexport class V1Embed extends TsEmbed {\n    constructor(domSelector, viewConfig) {\n        super(domSelector, viewConfig);\n        this.viewConfig = viewConfig;\n    }\n    /**\n     * Render the app in an iframe and set up event handlers\n     * @param iframeSrc\n     */\n    renderV1Embed(iframeSrc) {\n        this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n    }\n    // @override\n    on(messageType, callback) {\n        const eventType = this.getCompatibleEventType(messageType);\n        return super.on(eventType, callback);\n    }\n}\n//# sourceMappingURL=ts-embed.js.map"]},"metadata":{},"sourceType":"module"}